<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Biu~</title>
    <link>http://mimutao.github.io/</link>
    <description>Recent content on Biu~</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 21 Sep 2017 19:38:12 +0800</lastBuildDate>
    
	<atom:link href="http://mimutao.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Basic study about Queue with array</title>
      <link>http://mimutao.github.io/post/queue_array/</link>
      <pubDate>Thu, 21 Sep 2017 19:38:12 +0800</pubDate>
      
      <guid>http://mimutao.github.io/post/queue_array/</guid>
      <description>Queue: Use c and array. queue.h  #ifndef _QUEUE_H #define _QUEUE_H #include&amp;lt;stdio.h&amp;gt; #include&amp;lt;stdbool.h&amp;gt; #include&amp;lt;malloc.h&amp;gt; typedef int Element_type; typedef struct Node *Queue; struct Node{ int Max_size; // Max_size is the capacity of the array. int front; int rear; int size; Element_type *data; // We use data is an array. the max_size of data(array) is Max_size. }; // function declaration. int size(Queue queue); bool is_empty(Queue queue); bool is_full(Queue queue); void Enqueue(Element_type x, Queue queue); Element_type Dequeue(Queue queue); Queue MakeQueue(int max_size); void Traverse(Queue queue); #endif  queue.</description>
    </item>
    
    <item>
      <title>Basic study about Stack with linklist</title>
      <link>http://mimutao.github.io/post/stack_link/</link>
      <pubDate>Wed, 20 Sep 2017 21:05:45 +0800</pubDate>
      
      <guid>http://mimutao.github.io/post/stack_link/</guid>
      <description>Stack: Use c and linklist stack.h  #ifndef STACK_H #define STACK_H #include&amp;lt;stdio.h&amp;gt; #include&amp;lt;malloc.h&amp;gt; #include&amp;lt;stdbool.h&amp;gt; typedef int Element_type; typedef struct Node *Stack; struct Node{ Element_type data; Stack next; }; // Initilcation. Stack Init(){ Stack stack = (Stack)malloc(sizeof(struct Node)); stack-&amp;gt;next = NULL; return stack; } //// Push //Stack Push(Element_type x, Stack stack){ // Stack stack_top = (Stack)malloc(sizeof(struct Node)); // stack_top-&amp;gt;data = x; // stack_top-&amp;gt;next = stack; // return stack_top; //} // Push a better way.</description>
    </item>
    
    <item>
      <title>Biaic study about Stack with array</title>
      <link>http://mimutao.github.io/post/stack_array/</link>
      <pubDate>Wed, 20 Sep 2017 19:38:57 +0800</pubDate>
      
      <guid>http://mimutao.github.io/post/stack_array/</guid>
      <description>Stack: Use c and array stack.h  #ifndef STACK_H #define STACK_H #include&amp;lt;stdio.h&amp;gt; #include&amp;lt;stdbool.h&amp;gt; #include&amp;lt;malloc.h&amp;gt; #define Max_size 100 typedef int Element_type; typedef struct Node *Stack; struct Node{ Element_type data[Max_size]; int Top; }; // Init Stack Init(){ Stack stack = (Stack)malloc(sizeof(struct Node)); stack-&amp;gt;Top = -1; // use top=-1 to express the stack is empty. return stack; } // is_empty bool is_empty(Stack stack){ return stack-&amp;gt;Top==-1?true:false; } // is_full bool is_full(Stack stack){ return stack-&amp;gt;Top==Max_size-1?</description>
    </item>
    
    <item>
      <title>Basic study about Linklist</title>
      <link>http://mimutao.github.io/post/linklist/</link>
      <pubDate>Wed, 20 Sep 2017 10:56:53 +0800</pubDate>
      
      <guid>http://mimutao.github.io/post/linklist/</guid>
      <description>List: Use c and linklist linklist.h  #ifndef LINKLIST_H #define LINKLIST_H #include&amp;lt;stdio.h&amp;gt; #include &amp;lt;malloc.h&amp;gt; typedef int Element_type; // Note List is an pointer point to Node. typedef struct Node *List; struct Node{ Element_type data; List next; }; // Initialization. List Init(){ List head = (List)malloc(sizeof(struct Node)); head-&amp;gt;next = NULL; return head; } // get the length of list. int Length(List linklist){ int i = 0; List temp = linklist; while(temp-&amp;gt;next !</description>
    </item>
    
    <item>
      <title>Basic study about List</title>
      <link>http://mimutao.github.io/post/list/</link>
      <pubDate>Tue, 19 Sep 2017 16:28:47 +0800</pubDate>
      
      <guid>http://mimutao.github.io/post/list/</guid>
      <description>List: Use array and c List.h  #ifndef LIST_H #define LIST_H #include&amp;lt;stdio.h&amp;gt; #include&amp;lt;malloc.h&amp;gt; #include&amp;lt;stdbool.h&amp;gt; #define Max_size 100 // 设定线性表的大小 typedef int Element_type; // 设置变量类型 typedef struct Node *List; // 定义指针 struct Node{ Element_type data[Max_size]; int end_pos; }; // 初始化 List Init(){ List plist; plist = (List)malloc(sizeof(struct Node)); plist-&amp;gt;end_pos = -1; return plist; } // 查找 int Find( Element_type x, List plist){ int i=0; while(i&amp;lt;=plist-&amp;gt;end_pos){ if(x == plist-&amp;gt;data[i]){ printf(&amp;quot;find it\n&amp;quot;); return i; } ++i; } printf(&amp;quot;not find it.</description>
    </item>
    
    <item>
      <title>Brief introduction about me</title>
      <link>http://mimutao.github.io/post/introduction/</link>
      <pubDate>Tue, 05 Sep 2017 10:49:59 +0800</pubDate>
      
      <guid>http://mimutao.github.io/post/introduction/</guid>
      <description>Inroduction: Hey, My name is lenus an system engineer.
Follows are some basic information of me.
Name: MimuTao
Email: taoyueyue54@zju.edu.cn
School: Zhejiang University</description>
    </item>
    
  </channel>
</rss>